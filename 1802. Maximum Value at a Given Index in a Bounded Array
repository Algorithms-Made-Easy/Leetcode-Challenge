//Bruteforce - O(Steps OR Result)/ O(1)
class Solution {
    public int maxValue(int n, int index, int maxSum) {
        int res = 1;
        maxSum -= n;
        int left = 0, right = 0;
        int maxLeft = index, maxRight = n - index - 1;

        while(maxSum > 0) {
            res++;
            int leftVal = Math.min(left++, maxLeft);
            int rightVal = Math.min(right++, maxRight);
            maxSum -= (1 + leftVal + rightVal);
        }
        return (maxSum<0) ? res-1 : res;
    }
}


//Optimized - O(N)/O(1)
class Solution {
    public int maxValue(int n, int index, int maxSum) {
        int res = 1;
        maxSum -= n;
        int left = 0, right = 0;
        int maxLeft = index, maxRight = n - index - 1;

        while(maxSum > 0) {
            res++;
            int leftVal = Math.min(left++, maxLeft);
            int rightVal = Math.min(right++, maxRight);
            maxSum -= (1 + leftVal + rightVal);

            if(leftVal == maxLeft && rightVal == maxRight) {
                break;
            }
        }

        if(maxSum > 0){
            res = res + (maxSum/n);
        }

        return (maxSum<0) ? res-1 : res;
    }
}
