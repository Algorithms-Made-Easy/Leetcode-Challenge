class Solution {
    List<List<String>> result;
    public List<List<String>> solveNQueens(int n) {
        result = new ArrayList<>();
        //Take a board. .Q
        char[][] board = new char[n][n];
        for(int i =0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                board[i][j] = '.';
            }
        }
        List<int[]> queenPos = new ArrayList<>();
        dfs(board, 0, queenPos);
        return result;
    }
    
    private void dfs(char[][] board, int row, List<int[]> queenPos) {
        //Chaeck if we have placed all the queens
        if(queenPos.size() == board.length) {
            //Construct the result
            List<String> rowData = new ArrayList<>();
            for(char[] c : board){
                rowData.add(new String(c));
            }
            result.add(rowData);
        }
        
        //Try adduing Queen at row, col
        for(int col = 0; col < board.length; col++) {
            if(canAddQueen(queenPos, row, col)) {
                board[row][col] = 'Q';
                queenPos.add(new int[]{row, col});
                dfs(board, row+1, queenPos);
                board[row][col] = '.';
                queenPos.remove(queenPos.size()-1);
            }
        }
    }
    
    private boolean canAddQueen(List<int[]> queenPos, int row, int col) {
        for(int[] pair : queenPos) {
            int dx = Math.abs(pair[0]- row);
            int dy = Math.abs(pair[1]- col);
            if(dx==0 || dy == 0 || dx == dy) return false;
        }
        return true;
    }
}
